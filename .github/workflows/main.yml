# Worflow to test we can load our conda lock environments on win, macOS, and ubuntu

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
  pull_request:
    branches:
      - master

jobs:
  model-ci:
    name: Test model code and parameterisation
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: "ubuntu-latest"
            lock-file: "conda_locks/conda-linux-64.lock"
          - os: "macos-latest"
            lock-file: "conda_locks/conda-osx-64.lock"
          - os: "windows-latest"
            lock-file: "conda_locks/conda-win-64.lock"
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v2
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: false
          activate-environment: explicit-env
          environment-file: ${{ matrix.lock-file }}
      - run: |
          conda info
          conda list
          conda config --show-sources
          conda config --show
          printenv | sort
      - name: Run unit tests
        run: pytest
        working-directory: MesaModel
      - name: Check that lhs_sampling works (and output header matches the example)
        run: |
          python lhs_sampling.py
          diff <(head -n 1 lhs_params.csv) <(head -n 1 example_lhs_params.csv)
        working-directory: hamilton/parameter_input


  multilevel-analysis:
    name: Test multilevel analysis
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    env:
      MLNSCRIPT_PATH: /usr/bin/mlnscript
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"

    steps:
      - uses: actions/checkout@v2
      - name: Setup conda env
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: false
          activate-environment: classroom_abm
          environment-file: conda_locks/conda-linux-64.lock
      - name: Setup R
        uses: r-lib/actions/setup-r@v1
        with:
          r-version: '4.0.3'
      - name: Query R dependencies
        run: |
          install.packages('remotes')
          depends_path <- file.path(Sys.getenv('GITHUB_WORKSPACE'), ".github", "depends.Rds")
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), depends_path, version = 2)
          r_version_path <- file.path(Sys.getenv('GITHUB_WORKSPACE'), ".github", "R-version")
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), r_version_path)
        shell: Rscript {0}
        working-directory: multilevel_analysis/R/classroommlm
      - name: Restore R package cache
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-
      - name: Install system dependencies for R
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "20.04"))')
      - name: Install other system dependencies
        run: |
          sudo apt-get install libcurl4 libcurl4-openssl-dev
      - name: Install R dependencies
        run: |
          remotes::install_cran(c("renv", "rcmdcheck"))
        shell: Rscript {0}
      - name: Install MLwiN
        run: ./setup_mlwin.sh
        env:
          MLWIN_SHARE_URL: ${{ secrets.MLWIN_SHARE_URL }}
          MLWIN_DOWNLOAD_URL: ${{ secrets.MLWIN_DOWNLOAD_URL }}
      - name: Check classroommlm R package
        run: |
          options(crayon.enabled = TRUE)
          remotes::install_deps(dependencies = TRUE)
          rcmdcheck::rcmdcheck(args = "--no-manual", error_on = "warning", check_dir = "check")
        shell: Rscript {0}
        working-directory: multilevel_analysis/R/classroommlm
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
      - name: Copy built package to in run_mlm local packages dir
        run: |
          mv classroommlm/check/classroommlm*.tar.gz run_mlm/renv/local
          ls -l run_mlm/renv/local
        working-directory: multilevel_analysis/R
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
      - name: Run multilevel analysis
        run: |
          cd multilevel_analysis
          python run_pipeline.py -t -i ../classes_input/test_input_2_classes.csv
          python run_pipeline.py -t -i ../classes_input/test_input_2_classes.csv -mp 2 1.26 0.2 2 1.08 0.2 6 0.12 0.0043 800 0.04 0.2 0.999993 0.08 150 50 0.5 0.5
      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r-results
          path: multilevel_analysis/R/classroommlm/check
